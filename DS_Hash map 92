{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nm307b-FgffH",
        "outputId": "ace3385d-f6ae-4860-e2d9-6d9c639d53e8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "False\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "def follows_pattern(pattern, s):\n",
        "  #split the string into a list of words\n",
        "    words = s.split()\n",
        "    if len(pattern) != len(words):\n",
        "        return False\n",
        "\n",
        "    #Dictionaries to store the mappings between patterns and words\n",
        "    mapping = {} #maps pattern character to word\n",
        "    reverse_mapping = {}  #maps word to pattern character\n",
        "    for char, word in zip(pattern, words):\n",
        "        if char in mapping:\n",
        "\n",
        "          # check  if the current word matches the mappes word\n",
        "            if mapping[char] != word:\n",
        "                return False\n",
        "        else:\n",
        "            if word in reverse_mapping:\n",
        "                return False\n",
        "\n",
        "                #create new mapping\n",
        "            mapping[char] = word\n",
        "            reverse_mapping[word] = char\n",
        "\n",
        "            #if all checks pass return true\n",
        "\n",
        "    return True\n",
        "\n",
        "#test cases\n",
        "print(follows_pattern(\"abba\", \"dog cat cat dog\"))  # patterns matches to string\n",
        "print(follows_pattern(\"abba\", \"dog cat cat fish\"))  #mismatch\n",
        "print(follows_pattern(\"aaaa\", \"dog cat cat dog\")) #all pattern map different to word"
      ]
    }
  ]
}